name: Build and Push Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          ${{ secrets.DOCKERHUB_USERNAME }}/social-media-app
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate deployment artifact
      if: github.event_name != 'pull_request'
      run: |
        mkdir -p deployment-artifacts
        
        # Create docker-compose file for deployment
        cat > deployment-artifacts/docker-compose.yml << 'EOF'
        version: '3.8'
        services:
          postgres:
            image: postgres:15-alpine
            restart: unless-stopped
            environment:
              POSTGRES_DB: ${POSTGRES_DB:-social_media}
              POSTGRES_USER: ${POSTGRES_USER:-postgres}
              POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            volumes:
              - postgres_data:/var/lib/postgresql/data
            networks:
              - app_network
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-social_media}"]
              interval: 30s
              timeout: 10s
              retries: 3

          app:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            restart: unless-stopped
            environment:
              NODE_ENV: production
              PORT: 5000
              DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-social_media}
            ports:
              - "5000:5000"
            depends_on:
              postgres:
                condition: service_healthy
            networks:
              - app_network
            healthcheck:
              test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/auth/me"]
              interval: 30s
              timeout: 10s
              retries: 3

          nginx:
            image: nginx:alpine
            restart: unless-stopped
            ports:
              - "80:80"
              - "443:443"
            volumes:
              - ./nginx.conf:/etc/nginx/nginx.conf:ro
              - ./ssl:/etc/nginx/ssl:ro
            depends_on:
              - app
            networks:
              - app_network

        volumes:
          postgres_data:

        networks:
          app_network:
            driver: bridge
        EOF
        
        # Create deployment script
        cat > deployment-artifacts/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "ðŸš€ Deploying Social Media Application..."
        
        # Pull latest image
        docker-compose pull app
        
        # Stop existing containers
        docker-compose down
        
        # Start services
        docker-compose up -d
        
        echo "âœ… Deployment complete!"
        echo "Application available at: http://localhost:5000"
        EOF
        
        chmod +x deployment-artifacts/deploy.sh
        
        # Create .env.example
        cat > deployment-artifacts/.env.example << 'EOF'
        # Database Configuration
        POSTGRES_DB=social_media
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=your_secure_password_here
        EOF

    - name: Upload deployment artifacts
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: deployment-files
        path: deployment-artifacts/